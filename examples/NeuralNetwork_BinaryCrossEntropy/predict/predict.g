LoadPackage( "GradientDescentForCAP" );


Smooth := SkeletalSmoothMaps;
Para := CategoryOfParametrisedMorphisms( Smooth );


## The function we are trying minimize
predict := PredictionMorphismOfNeuralNetwork( Para, 2, [ 6, 6, 6 ], 1, "Sigmoid" );

w :=
[ -2.38307, 1.15643, -2.66248, 0.202663, 1.60522, 1.59726, 0.863359, -0.0672719, 1.01209, 0.917226, 0.37308, -0.874496, -1.47228, 2.07342,
  0.89595, -0.680186, -0.231272, -0.517491, 1.06231, -0.272462, -0.0247753, 2.65761, 0.442513, 0.740077, 0.031517, 0.642174, 1.99124, -3.92456,
  -0.222431, 0.18775, 0.532778, 0.595967, 0.00709807, 0.0340034, -0.479791, 0.939005, -0.526106, 0.297613, 0.114837, 1.25861, -0.927486,
  -0.0156671, 1.22388, -0.931856, -0.538889, 0.612112, 1.06765, 1.34294, 1.26254, 1.28733, 0.102527, 0.283199, -2.90589, -0.00263669, 1.21756,
  0.923131, 1.2773, -2.62932, -0.805291, 0.85247, -2.66598, -0.562073, -0.328354, 1.58834, 0.783209, -0.457507, -2.02291, 1.03056, 1.68808,
  0.0119393, -0.440639, -0.411077, -0.285951, -0.575991, -0.109411, 0.369939, -0.166541, -1.02908, 0.0936507, -0.205397, -2.38514, 0.102405,
  -0.998627, 0.660356, 0.510562, 0.865732, 0.440473, 1.10545, 0.718466, 0.678435, -1.08617, -4.02352, -2.32914, -1.8468, -3.33328, -0.0866419,
  0.0746266, 1.18941, 0.231497, -0.188211, -0.112001, 4.46077, 0.15901, 3.51666, -0.105457, -0.241886, 3.87409, -2.16175, -1.90423 ];

## Let us use w to predict:
predict_using_w := UnderlyingMorphism( ReparametriseMorphism( predict, Smooth.Constant( w ) ) );

## create inputs:
inputs := Cartesian( 0.01 * [ -100 .. 100 ], 0.01 * [ -100 .. 100 ] );
predictions := List( inputs, x -> SelectBasedOnCondition( predict_using_w( x )[1] > 0.5, 1, 0 ) );


ScatterPlotUsingPython( inputs, predictions );
